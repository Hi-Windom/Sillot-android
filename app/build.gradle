/*
 * Sillot T☳Converbenk Matrix 汐洛彖夲肜矩阵：为智慧新彖务服务
 * Copyright (c) 2024.
 *
 * lastModified: 2024/7/8 上午5:41
 * updated: 2024/7/8 上午5:41
 */

import org.jetbrains.kotlin.gradle.dsl.jvm.JvmTargetValidationMode
import org.jetbrains.kotlin.gradle.tasks.KotlinCompile
import org.jetbrains.kotlin.gradle.tasks.KotlinJvmCompile

plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id "io.sentry.android.gradle"
    id 'io.realm.kotlin'
    id "org.jetbrains.kotlin.plugin.compose"
    id "com.google.devtools.ksp"
    id 'org.jetbrains.kotlin.plugin.serialization'
    id 'kotlin-parcelize' // https://developer.android.com/kotlin/parcelize
}


// 多渠道打包配置已引用的方式传递
//apply from: rootProject.file('flavors.gradle')
//apply from: rootProject.file('buildRelease.gradle')

// REF https://kotlinlang.org/docs/gradle-configure-project.html?utm_campaign=gradle-jvm-target-validation&utm_medium=kgp&utm_source=warnings#check-for-jvm-target-compatibility-of-related-compile-tasks
tasks.withType(KotlinJvmCompile.class).configureEach {
    jvmTargetValidationMode = JvmTargetValidationMode.ERROR
}
android {
    namespace 'sc.windom.namespace.SillotMatrix' // namespace 主要用于内部资源管理和避免冲突，比如 R 类 和 BuildConfig
    compileSdk 34
//    buildToolsVersion '33.0.2' // @Deprecated

    buildFeatures {
//        dataBinding true // 数据绑定
        compose true
        buildConfig true
    }
//    composeOptions {
//        kotlinCompilerExtensionVersion = "1.5.11" // kotlin2.0后不再需要手动对齐版本  REF https://developer.android.com/jetpack/androidx/releases/compose-kotlin?hl=zh-cn
//    }


    defaultConfig {
        applicationId "sc.windom.sillot" // applicationId 是应用程序在设备上的唯一标识符，决定了应用程序的安装位置和包名。
        minSdk 31 // android 12
        targetSdkVersion 34 // android 14
        versionCode vC
        versionName versionSillot // Sillot 版本同步

        ndk {
            //只接入对应 cpu 类型的 .so 库。
            abiFilters 'arm64-v8a'
        }

        manifestPlaceholders = [
                JPUSH_PKGNAME : applicationId,
                //JPush 上注册的包名对应的 Appkey.
                JPUSH_APPKEY : "737a606890201619d17999c7",
                //暂时填写默认值即可.
                JPUSH_CHANNEL : "developer-default",
        ]
    }

    // 自定义打包名称
    android.applicationVariants.configureEach { variant ->
        variant.outputs.configureEach { output ->
            def versionType = variant.buildType.name
            if (versionType.equalsIgnoreCase("release")) {
                outputFileName = "Sillot-v${versionSillot}_${genDate()}_syv${siyuanVersionName}.apk"
            }
            else if (versionType.equalsIgnoreCase("canary")) {
                outputFileName = "Sillot[canary]-v${versionSillot}_${genDate()}_syv${siyuanVersionName}.apk"
            }
            else if (versionType.equalsIgnoreCase("dev")) {
                outputFileName = "Sillot[dev]-v${versionSillot}_${genDate()}_syv${siyuanVersionName}.apk"
            }
            else {
                outputFileName = "Sillot.apk"
            }
            output.outputFileName = outputFileName
        }
    }

    // 目前 action 相当于正式版
    buildTypes {
        action { // 防止第三方库debug模式导致action失败
//            applicationIdSuffix ".debug"
            resValue "string","app_name","汐洛公测版"
            manifestPlaceholders = [
                    provider_authorities : "sc.windom.sillot.app.provider",
            ]
            buildConfigField "String", "PROVIDER_AUTHORITIES", "\"sc.windom.sillot.app.provider\""
            jniDebuggable false
            renderscriptDebuggable true
            minifyEnabled true  // R8代码缩减功能
            shrinkResources true
            matchingFallbacks = ['release'] // 第三方库处理
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro' // 混淆规则
        }
        canary { // 每日构建
            versionNameSuffix ".canary.${vC}${genDateTime()}" // 避免覆盖安装失败
            resValue "string","app_name","汐洛探索版"
            manifestPlaceholders = [
                    provider_authorities : "sc.windom.sillot.app.provider.canary",
            ]
            buildConfigField "String", "PROVIDER_AUTHORITIES", "\"sc.windom.sillot.app.provider.canary\""
            jniDebuggable false
            renderscriptDebuggable true
            minifyEnabled true  // R8代码缩减功能
            shrinkResources true
            matchingFallbacks = ['release'] // 第三方库处理
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro' // 混淆规则
        }
        dev {
            versionNameSuffix ".dev.${vC}${genDateTime()}" // 避免覆盖安装失败
            resValue "string","app_name","汐洛内测版"
            manifestPlaceholders = [
                    provider_authorities : "sc.windom.sillot.app.provider.dev",
            ]
            buildConfigField "String", "PROVIDER_AUTHORITIES", "\"sc.windom.sillot.app.provider.dev\""
            jniDebuggable false
            renderscriptDebuggable true
            minifyEnabled true  // R8代码缩减功能
            shrinkResources true
            matchingFallbacks = ['release'] // 第三方库处理
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro' // 混淆规则
        }
        debug {
            versionNameSuffix ".debug.${vC}${genDateTime()}" // 避免覆盖安装失败
            resValue "string","app_name","汐洛内部调试版"
            manifestPlaceholders = [
                    provider_authorities : "sc.windom.sillot.app.provider.debug",
            ]
            buildConfigField "String", "PROVIDER_AUTHORITIES", "\"sc.windom.sillot.app.provider.debug\""
        }
        release {
            minifyEnabled true
            shrinkResources true
            versionNameSuffix ".${vC}"
            resValue "string","app_name","汐洛"
            manifestPlaceholders = [
                    provider_authorities : "sc.windom.sillot.app.provider.release",
            ]
            buildConfigField "String", "PROVIDER_AUTHORITIES", "\"sc.windom.sillot.app.provider.release\""
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    // SB Android
    // SB Java
    // SB JVM Target
    def JAVA_VERSION = 17
    compileOptions {
        sourceCompatibility JAVA_VERSION
        targetCompatibility JAVA_VERSION
        kotlinOptions {
            tasks.withType(KotlinCompile).configureEach {
                kotlinOptions.jvmTarget = JAVA_VERSION.toString()
            }
        }
    }
    java {
        toolchain {
            languageVersion.set(JavaLanguageVersion.of(JAVA_VERSION))
        }
    }
    // https://developer.android.google.cn/jetpack/androidx/releases/compose?hl=zh-cn#groovy
    kotlinOptions {
        jvmTarget = JAVA_VERSION.toString()
    }
    kotlin {
        jvmToolchain(JAVA_VERSION)
    }

//    全局配置强制使用某个版本的依赖来解决依赖冲突中出现的依赖
    configurations.configureEach {
        // https://www.jianshu.com/p/322472456915
        resolutionStrategy {
//            failOnVersionConflict() // 快速找到冲突的库以及各版本号，实际上没什么卵用 SB
            //远程依赖替换成本地依赖
            //substitute module('org.gradle:util:3.0') with project(':util')
            //也可以将远程依赖换成另外的远程依赖，假设我们修改过的代码发布到自己的 maven 中央仓库后叫：com.xxx.xxx:util:3.0
            //substitute module('org.gradle:util:3.0') with module('com.xxx.xxx:util:3.0')
        }
    }

    packagingOptions {
        resources {
            excludes += ['META-INF/DEPENDENCIES',
                         'META-INF/LICENSE',
                         'META-INF/LICENSE.txt',
                         'META-INF/license.txt',
                         'META-INF/NOTICE',
                         'META-INF/NOTICE.txt',
                         'META-INF/notice.txt',
                         'plugin.properties']
        }
        jniLibs {
            useLegacyPackaging true
        }
    }

    lint {
        abortOnError false
    }
    ndkVersion '25.2.9519653'
}

static def genDate() {
    return new Date().format("yyyyMMdd")
}
static def genDateTime() {
    return new Date().format("yyMMddHHmm")
}
dependencies {
    def couchbase_lite_version = "3.2.0-beta.1"
    def realm_version = "1.11.0"
    def moshi_version = "1.15.1"
    def camerax_version = "1.4.0-beta02"
    def navigation_version = "2.7.7"
    def google_accompanist_version = "0.34.0"
    def media3_version = "1.3.1"
    def biometric_version = "1.2.0-alpha05"
    def lifecycle_version = "2.8.2"
    def work_version = "2.9.0"
    // Sillot 仅需兼容 Android 11+ ，放心升级，无需理会下面的不要升级警告（仅针对 Android 版本）
    implementation 'androidx.appcompat:appcompat:1.7.0'
    implementation 'com.google.android.material:material:1.12.0'
    implementation "androidx.lifecycle:lifecycle-process:${lifecycle_version}"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:${lifecycle_version}"
    implementation "androidx.lifecycle:lifecycle-service:${lifecycle_version}"
    implementation 'androidx.work:work-runtime:2.9.0'

    implementation(name: 'kernel', ext: 'aar', group: '', version: '')

    implementation("commons-io:commons-io:2.13.0")
    implementation "com.squareup.okhttp3:okhttp:4.12.0"
    implementation "com.squareup.retrofit2:retrofit:2.11.0"
    // Gson converter for Retrofit
    implementation "com.squareup.retrofit2:converter-gson:2.11.0"
    implementation 'com.gitee.zackratos:UltimateBarX:0.8.0'
    implementation 'com.blankj:utilcodex:1.31.1'
    implementation 'com.koushikdutta.async:androidasync:2.2.1'

    implementation 'com.github.khushpanchal:Ketch:1.0.0' // file downloader library


//    极光推送
    implementation 'cn.jiguang.sdk:jcore:4.7.0'
    implementation 'cn.jiguang.sdk:jpush:5.2.2'

    implementation 'com.tencent:mmkv:1.3.1'
    annotationProcessor 'androidx.room:room-compiler:2.6.1'
    // Don't forget to include Room annotation compiler from Google.

    // For developers using AndroidX in their applications
    implementation 'pub.devrel:easypermissions:3.0.0'

    // For developers using the Android Support Library
    implementation 'pub.devrel:easypermissions:3.0.0'
    implementation 'androidx.core:core-ktx:1.13.1'

    implementation 'io.reactivex.rxjava3:rxandroid:3.0.2'
    // Because RxAndroid releases are few and far between, it is recommended you also
    // explicitly depend on RxJava's latest version for bug fixes and new features.
    // (see https://github.com/ReactiveX/RxJava/releases for latest 3.x.x version)
    implementation 'io.reactivex.rxjava3:rxjava:3.1.6'
    implementation "io.reactivex.rxjava3:rxkotlin:3.0.1"

//    annotationProcessor 'com.android.databinding:compiler:3.1.4' // 数据绑定

    //使用以下依赖的话需要在创建Moshi的时候添加KotlinJsonAdapterFactory()
    implementation "com.squareup.moshi:moshi:${moshi_version}"
//Moshi.Builder().add(KotlinJsonAdapterFactory()).build()
    implementation "com.squareup.moshi:moshi-kotlin:${moshi_version}"
    // 如果你需要使用Moshi来处理JSON adapters，也添加这个依赖
    ksp "com.squareup.moshi:moshi-kotlin-codegen:${moshi_version}"

    implementation 'com.tencent.bugly:crashreport:4.1.9.2'
    implementation "io.coil-kt:coil:2.6.0"
    implementation "io.coil-kt:coil-compose:2.6.0"
    implementation 'com.microsoft.clarity:clarity:2.3.0'

    // Java实现指纹识别
    implementation "androidx.biometric:biometric:${biometric_version}"
    // Kotlin实现指纹识别
    implementation "androidx.biometric:biometric-ktx:${biometric_version}"

    //完整版引入
    implementation 'com.github.CarGuo.GSYVideoPlayer:GSYVideoPlayer:v8.6.0-release-jitpack'

    // DialogX-mavenCentral
    // implementation "com.kongzue.dialogx:DialogX:0.0.49"
    // implementation "com.kongzue.dialogx.style:DialogXMIUIStyle:0.0.49"
    // DialogX-Jitpack
    implementation "com.github.kongzue.DialogX:DialogX:0.0.50.beta16.3"
    implementation "com.github.kongzue.DialogX:DialogXMIUIStyle:0.0.50.beta16.3"
    implementation "io.realm.kotlin:library-base:${realm_version}"
    implementation "io.realm.kotlin:library-sync:${realm_version}"// If using Device Sync
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.7.3' // If using coroutines with the SDK

    // To recognize Chinese script
    implementation 'com.google.mlkit:text-recognition-chinese:16.0.0' // REF https://developers.google.cn/ml-kit/vision/text-recognition/v2/android?hl=zh-cn
    // Use this dependency to bundle the model with your app
    implementation 'com.google.mlkit:barcode-scanning:17.2.0' // REF https://developers.google.cn/ml-kit/vision/barcode-scanning/android?hl=zh-cn
    // Use this dependency to bundle the model with your app
    implementation 'com.google.mlkit:face-detection:16.1.6' // REF https://developers.google.cn/ml-kit/vision/face-detection/android?hl=zh-cn#real-time_face_detection
    // Use this dependency to bundle the model with your app
    implementation 'com.google.mlkit:language-id:17.0.5' // REF https://developers.google.cn/ml-kit/language/identification/android?hl=zh-cn

    // REF https://github.com/android/camera-samples
    implementation "androidx.camera:camera-core:${camerax_version}"
    implementation "androidx.camera:camera-camera2:${camerax_version}"
    implementation "androidx.camera:camera-lifecycle:${camerax_version}"
    implementation "androidx.camera:camera-view:${camerax_version}"
    // Huawei scan kit
    implementation 'com.huawei.hms:scanplus:2.12.0.301'

    def composeBom = platform('androidx.compose:compose-bom:2024.06.00')
    implementation composeBom
    androidTestImplementation composeBom

    // REF https://developer.android.com/develop/ui/compose/setup?hl=zh-cn#groovy
    // Material Design 3
    implementation 'androidx.compose.material3:material3'
    // 妹想到官网例子 Text("Hello World") 居然都需要 Material Design ，家人们谁懂啊
    // or skip Material Design and build directly on top of foundational components
//    implementation 'androidx.compose.foundation:foundation'

    // Android Studio Preview support
    // REF https://developer.android.com/develop/ui/compose/tooling?hl=zh-cn#bom
    implementation 'androidx.compose.ui:ui-tooling-preview'
    debugImplementation 'androidx.compose.ui:ui-tooling'

    // UI Tests
    androidTestImplementation 'androidx.compose.ui:ui-test-junit4'
    debugImplementation 'androidx.compose.ui:ui-test-manifest'

    // Optional - Add full set of material icons
    implementation 'androidx.compose.material:material-icons-extended'
    // Optional - Add window size utils
    implementation 'androidx.compose.material3:material3-window-size-class'

    // Optional - Integration with activities
    implementation 'androidx.activity:activity-compose'
    // Optional - Integration with ViewModels
    implementation 'androidx.lifecycle:lifecycle-viewmodel-compose'
    // Optional - Integration with LiveData
    implementation 'androidx.compose.runtime:runtime-livedata'
    // Optional - Integration with RxJava
//    implementation 'androidx.compose.runtime:runtime-rxjava2'
    implementation "androidx.compose.runtime:runtime-rxjava3"

    implementation 'androidx.annotation:annotation'


    // Java language implementation
    implementation "androidx.navigation:navigation-fragment:$navigation_version"
    implementation "androidx.navigation:navigation-ui:$navigation_version"
    // Kotlin
    implementation "androidx.navigation:navigation-fragment-ktx:$navigation_version"
    implementation "androidx.navigation:navigation-ui-ktx:$navigation_version"
    // Feature module Support
    implementation "androidx.navigation:navigation-dynamic-features-fragment:$navigation_version"
    // Testing Navigation
    androidTestImplementation "androidx.navigation:navigation-testing:$navigation_version"
    // Jetpack Compose Integration
    implementation "androidx.navigation:navigation-compose:$navigation_version"

    implementation "com.google.accompanist:accompanist-permissions:${google_accompanist_version}"
    implementation "com.google.accompanist:accompanist-systemuicontroller:${google_accompanist_version}"

    // For media playback using ExoPlayer
//    implementation "androidx.media3:media3-exoplayer:$media3_version"
//    // For DASH playback support with ExoPlayer
//    implementation "androidx.media3:media3-exoplayer-dash:$media3_version"
//    // For HLS playback support with ExoPlayer
//    implementation "androidx.media3:media3-exoplayer-hls:$media3_version"
//    // For SmoothStreaming playback support with ExoPlayer
//    implementation "androidx.media3:media3-exoplayer-smoothstreaming:$media3_version"
//    // For RTSP playback support with ExoPlayer
//    implementation "androidx.media3:media3-exoplayer-rtsp:$media3_version"
//    // For MIDI playback support with ExoPlayer (see additional dependency requirements in
//    // https://github.com/androidx/media/blob/release/libraries/decoder_midi/README.md)
//    implementation "androidx.media3:media3-exoplayer-midi:$media3_version"
//    // For ad insertion using the Interactive Media Ads SDK with ExoPlayer
//    implementation "androidx.media3:media3-exoplayer-ima:$media3_version"
//    // For loading data using the Cronet network stack
//    implementation "androidx.media3:media3-datasource-cronet:$media3_version"
//    // For loading data using the OkHttp network stack
//    implementation "androidx.media3:media3-datasource-okhttp:$media3_version"
//    // For loading data using librtmp
//    implementation "androidx.media3:media3-datasource-rtmp:$media3_version"
//    // For building media playback UIs
//    implementation "androidx.media3:media3-ui:$media3_version"
//    // For building media playback UIs for Android TV using the Jetpack Leanback library
//    implementation "androidx.media3:media3-ui-leanback:$media3_version"
//    // For exposing and controlling media sessions
//    implementation "androidx.media3:media3-session:$media3_version"
//    // For extracting data from media containers
//    implementation "androidx.media3:media3-extractor:$media3_version"
//    // For integrating with Cast
//    implementation "androidx.media3:media3-cast:$media3_version"
//    // For scheduling background operations using Jetpack Work's WorkManager with ExoPlayer
//    implementation "androidx.media3:media3-exoplayer-workmanager:$media3_version"
//    // For transforming media files
//    implementation "androidx.media3:media3-transformer:$media3_version"
//    // For applying effects on video frames
//    implementation "androidx.media3:media3-effect:$media3_version"
//    // For muxing media files
//    implementation "androidx.media3:media3-muxer:$media3_version"
//    // Utilities for testing media components (including ExoPlayer components)
//    implementation "androidx.media3:media3-test-utils:$media3_version"
//    // Utilities for testing media components (including ExoPlayer components) via Robolectric
//    implementation "androidx.media3:media3-test-utils-robolectric:$media3_version"
//    // Common functionality for reading and writing media containers
//    implementation "androidx.media3:media3-container:$media3_version"
//    // Common functionality for media database components
//    implementation "androidx.media3:media3-database:$media3_version"
//    // Common functionality for media decoders
//    implementation "androidx.media3:media3-decoder:$media3_version"
//    // Common functionality for loading data
//    implementation "androidx.media3:media3-datasource:$media3_version"
    // Common functionality used across multiple media libraries
    implementation "androidx.media3:media3-common:$media3_version" // MimeTypes 需要

    implementation "com.louiscad.splitties:splitties-systemservices:3.0.0"

    implementation "org.jetbrains.kotlinx:kotlinx-serialization-json:1.7.1"

    implementation "androidx.swiperefreshlayout:swiperefreshlayout:1.1.0"

    implementation 'org.greenrobot:eventbus:3.3.1'

    implementation 'com.github.ZLYang110:FileSelector:2.1.6'

    implementation "me.saket.cascade:cascade:2.3.0"
    implementation "me.saket.cascade:cascade-compose:2.3.0"

    implementation "com.github.skydoves:colorpicker-compose:1.0.8"

    implementation 'org.jsoup:jsoup:1.17.2'
    implementation 'org.commonmark:commonmark:0.22.0'

    // (Java only)
    // implementation "androidx.work:work-runtime:$work_version"
    // Kotlin + coroutines
    implementation "androidx.work:work-runtime-ktx:$work_version"
    // optional - RxJava2 support
    // implementation "androidx.work:work-rxjava2:$work_version"
    // optional - GCMNetworkManager support
    // implementation "androidx.work:work-gcm:$work_version"
    // optional - Test helpers
    // androidTestImplementation "androidx.work:work-testing:$work_version"
    // optional - Multiprocess support
    // implementation "androidx.work:work-multiprocess:$work_version"

    implementation "androidx.webkit:webkit:1.11.0"

    implementation("com.github.ajalt.colormath:colormath:3.5.0")

    // optional extensions for interop with other platforms
    //
    // android.graphics.Color
    implementation("com.github.ajalt.colormath:colormath-ext-android-color:3.5.0")
    // androidx.annotation.ColorInt
    implementation("com.github.ajalt.colormath:colormath-ext-android-colorint:3.5.0")
    // androidx.compose.ui.graphics.Color
    implementation("com.github.ajalt.colormath:colormath-ext-jetpack-compose:3.5.0")
}
